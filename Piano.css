html {
    box-sizing: border-box;
  }
  
  *, *::before, *::after {
    box-sizing: inherit;
  }
  /* ::before and ::after are pseudo-selectors creating a pseudo-element of the element. box-sizing here is inheriting the value from html selector */

  #piano {
    background-color: #00471b;
    width: 992px;
    height: 290px;
    margin: 80px auto;
    padding: 90px 20px 0 20px;
    position: relative;
    /* this allows the .keys class to have a point of reference */
    border-radius: 10px;
  }
  
  .keys {
    background-color: #040404;
    width: 949px;
    height: 180px;
    padding-left: 2px;
    overflow: hidden;
    /* overflow property here is in relation to the @media query. this allows the overflowing elements to be hidden once the @media query is reached */
  }
  
  .key {
    background-color: #ffffff;
    position: relative;
     /* this allows the .keys.black--key class to have a point of reference */
    width: 41px;
    height: 175px;
    margin: 2px;
    float: left;
    border-radius: 0 0 3px 3px;
  }

  .key:active {
    background-color: hsla(0, 0%, 100%, 0.671);
  }
  
  .key.black--key::after {
    /* creates a pseudo-element after the indicated selector */
    background-color: #1d1e22;
    content: "";
    /* related to the ::after pseudo-class. no value for class allows the element to be hidden but still a part of the html */
    position: absolute;
    left: -18px;
    width: 32px;
    height: 100px;
    border-radius: 0 0 3px 3px;
  }
  
  .logo {
    width: 5rem;
    position: absolute;
    top: 23px;
  }
  
  @media (max-width: 768px) {
    /* cuts down the piano once the max-width is reached */
    #piano {
      width: 358px;
    }
  
    .keys {
      width: 318px;
    }
  
    .logo {
      width: 4rem;
    }
  }
  
  @media (max-width: 1199px) and (min-width: 769px) {
    /* cuts or extends the piano based on the max & min width inputs */
    #piano{
      width: 675px;
    }
  
    .keys {
      width: 633px;
    }
  }